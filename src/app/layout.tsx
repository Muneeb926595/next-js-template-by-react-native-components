'use client'
import { Providers } from '@/stores/redux/Providers'
import './globals.css'
import { Inter } from 'next/font/google'
import { Constants } from '@/globals'
import StorageHelper, { StorageKeys } from '@/utils/StorageHelper'
import { AppError } from '@/utils/error/app-error'
import { LocaleProvider } from '@/localisations/locale-provider'
import { useEffect, useState } from 'react'
import 'intl';
import 'intl/locale-data/jsonp/en';

const inter = Inter({ subsets: ['latin'] })

const metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const [appLocaleProviderReady, setAppLocaleProviderReady] = useState(false);

  useEffect(() => {
    (async () => {
      await initAppAssets();
      setAppLocaleProviderReady(true);
    })();
  }, [])
  /**
   * Setup and init Locale provider, api, and repositories
   */
  const initAppAssets = async () => {
    let appLocale = Constants.DEFAULT_APP_LOCALE;
    try {
      appLocale = await StorageHelper.getItem(StorageKeys.SELECTED_APP_LANGUAGE) as string;
    } catch (e) {
      throw new AppError('App.tsx', 'initLocaleProvider', e);
    }
    await LocaleProvider.init(appLocale);
  };

  return (
    <html lang="en">
      <body className={inter.className}>
        {
          appLocaleProviderReady ? <Providers>{children}</Providers> : null
        }
      </body>
    </html>
  )
}
